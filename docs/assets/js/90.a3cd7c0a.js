(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{587:function(t,s,a){"use strict";a.r(s);var e=a(45),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"面试官-说说你对算法的理解-应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试官-说说你对算法的理解-应用场景"}},[t._v("#")]),t._v(" 面试官：说说你对算法的理解？应用场景？")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.vue-js.com/eca03690-1620-11ec-8e64-91fdec0f05a1.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"一、是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、是什么"}},[t._v("#")]),t._v(" 一、是什么")]),t._v(" "),a("p",[t._v("算法（Algorithm）是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法描述解决问题的策略机制")]),t._v(" "),a("p",[t._v("也就是说，能够对一定规范的输入，在有限时间内获得所要求的输出")]),t._v(" "),a("p",[t._v("如果一个算法有缺陷，或不适合于某个问题，执行这个算法将不会解决这个问题")]),t._v(" "),a("p",[t._v("一个程序=算法+数据结构，数据结构是算法实现的基础，算法总是要依赖于某种数据结构来实现的，两者不可分割")]),t._v(" "),a("p",[t._v("因此，算法的设计和选择要同时结合数据结构，简单地说数据结构的设计就是选择存储方式，如确定问题中的信息是用数组存储还是用普通的变量存储或其他更加复杂的数据结构")]),t._v(" "),a("p",[t._v("针对上述，可以得出一个总结：不同的算法可能用不同的时间、空间或效率来完成同样的任务")]),t._v(" "),a("h2",{attrs:{id:"二、特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、特性"}},[t._v("#")]),t._v(" 二、特性")]),t._v(" "),a("p",[t._v("关于算法的五大特性，有如下：")]),t._v(" "),a("ul",[a("li",[t._v("有限性（Finiteness）：一个算法必须保证执行有限步之后结束")]),t._v(" "),a("li",[t._v("确切性（Definiteness）： 一个算法的每一步骤必须有确切的定义")]),t._v(" "),a("li",[t._v("输入（Input）：一个算法有零个或多个输入，以刻画运算对象的初始情况，所谓零个输入是指算法本身给定了初始条件")]),t._v(" "),a("li",[t._v("输出（Output）：一个算法有一个或多个输出。没有输出的算法毫无意义")]),t._v(" "),a("li",[t._v("可行性（Effectiveness）：算法中执行的任何计算步骤都是可以被分解为基本的可执行的操作步骤，即每个计算步骤都可以在有限时间内完成（也称之为有效性）")])]),t._v(" "),a("h2",{attrs:{id:"三、应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、应用场景"}},[t._v("#")]),t._v(" 三、应用场景")]),t._v(" "),a("p",[t._v("在前端领域中，数据结构与算法无法不在，例如现在的"),a("code",[t._v("vue")]),t._v("或者"),a("code",[t._v("react")]),t._v("项目，实现虚拟"),a("code",[t._v("DOM")]),t._v("或者"),a("code",[t._v("Fiber")]),t._v("结构，本质就是一种数据结构，如下一个简单的虚拟"),a("code",[t._v("DOM")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("props")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lucifer'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("children")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'span'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("props")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("children")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[a("code",[t._v("vue")]),t._v("与"),a("code",[t._v("react")]),t._v("都能基于基于对应的数据结构实现"),a("code",[t._v("diff")]),t._v("算法，提高了整个框架的性能以及拓展性")]),t._v(" "),a("p",[t._v("包括在前端"),a("code",[t._v("javascript")]),t._v("编译的时候，都会生成对应的抽象语法树"),a("code",[t._v("AST")]),t._v("，其本身不涉及到任何语法，因此你只要编写相应的转义规则，就可以将任何语法转义到任何语法，也是"),a("code",[t._v("babel")]),t._v("， "),a("code",[t._v("PostCSS")]),t._v(", "),a("code",[t._v("prettier")]),t._v("， "),a("code",[t._v("typescript")])]),t._v(" "),a("p",[t._v("除了这些框架或者工具底层用到算法与数据结构之外，日常业务也无处不在，例如实现一个输入框携带联想功能，如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.vue-js.com/682d16c0-1621-11ec-8e64-91fdec0f05a1.png",alt:""}})]),t._v(" "),a("p",[t._v("如果我们要实现这个功能， 则可以使用前缀树，如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.vue-js.com/55a1ed50-1621-11ec-8e64-91fdec0f05a1.png",alt:""}})]),t._v(" "),a("p",[t._v('包括前端可能会做一些对字符串进行相似度检测，例如"每日一题"和"js每日一题"两个字符串进行相似度对比，这种情况可以通过“最小编辑距离”算法，如果'),a("code",[t._v("a")]),t._v("和"),a("code",[t._v("b")]),t._v("的编辑距离越小，我们认为越相似")]),t._v(" "),a("p",[t._v("日常在编写任何代码的都需要一个良好的算法思维，选择好的算法或者数据结构，能让整个程序效率更高")]),t._v(" "),a("h2",{attrs:{id:"参考文献"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),a("ul",[a("li",[t._v("https://baike.baidu.com/item/%E7%AE%97%E6%B3%95/209025")]),t._v(" "),a("li",[t._v("https://lucifer.ren/blog/2019/09/18/algorthimn-fe-1/")])])])}),[],!1,null,null,null);s.default=r.exports}}]);